// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InitializationInitParameters struct {
	InitType *string `json:"initType,omitempty" tf:"init_type,omitempty"`

	ServiceConnectionID *string `json:"serviceConnectionId,omitempty" tf:"service_connection_id,omitempty"`

	SourceType *string `json:"sourceType,omitempty" tf:"source_type,omitempty"`

	SourceURL *string `json:"sourceUrl,omitempty" tf:"source_url,omitempty"`
}

type InitializationObservation struct {
	InitType *string `json:"initType,omitempty" tf:"init_type,omitempty"`

	ServiceConnectionID *string `json:"serviceConnectionId,omitempty" tf:"service_connection_id,omitempty"`

	SourceType *string `json:"sourceType,omitempty" tf:"source_type,omitempty"`

	SourceURL *string `json:"sourceUrl,omitempty" tf:"source_url,omitempty"`
}

type InitializationParameters struct {

	// +kubebuilder:validation:Optional
	InitType *string `json:"initType" tf:"init_type,omitempty"`

	// +kubebuilder:validation:Optional
	ServiceConnectionID *string `json:"serviceConnectionId,omitempty" tf:"service_connection_id,omitempty"`

	// +kubebuilder:validation:Optional
	SourceType *string `json:"sourceType,omitempty" tf:"source_type,omitempty"`

	// +kubebuilder:validation:Optional
	SourceURL *string `json:"sourceUrl,omitempty" tf:"source_url,omitempty"`
}

type RepositoryInitParameters struct {
	DefaultBranch *string `json:"defaultBranch,omitempty" tf:"default_branch,omitempty"`

	Initialization []InitializationInitParameters `json:"initialization,omitempty" tf:"initialization,omitempty"`

	ParentRepositoryID *string `json:"parentRepositoryId,omitempty" tf:"parent_repository_id,omitempty"`

	// +crossplane:generate:reference:type=github.com/shivam-agrawal-30/provider-azuredevops/apis/project/v1alpha1.Project
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`
}

type RepositoryObservation struct {
	DefaultBranch *string `json:"defaultBranch,omitempty" tf:"default_branch,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Initialization []InitializationObservation `json:"initialization,omitempty" tf:"initialization,omitempty"`

	IsFork *bool `json:"isFork,omitempty" tf:"is_fork,omitempty"`

	ParentRepositoryID *string `json:"parentRepositoryId,omitempty" tf:"parent_repository_id,omitempty"`

	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	RemoteURL *string `json:"remoteUrl,omitempty" tf:"remote_url,omitempty"`

	SSHURL *string `json:"sshUrl,omitempty" tf:"ssh_url,omitempty"`

	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	WebURL *string `json:"webUrl,omitempty" tf:"web_url,omitempty"`
}

type RepositoryParameters struct {

	// +kubebuilder:validation:Optional
	DefaultBranch *string `json:"defaultBranch,omitempty" tf:"default_branch,omitempty"`

	// +kubebuilder:validation:Optional
	Initialization []InitializationParameters `json:"initialization,omitempty" tf:"initialization,omitempty"`

	// +kubebuilder:validation:Optional
	ParentRepositoryID *string `json:"parentRepositoryId,omitempty" tf:"parent_repository_id,omitempty"`

	// +crossplane:generate:reference:type=github.com/shivam-agrawal-30/provider-azuredevops/apis/project/v1alpha1.Project
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`
}

// RepositorySpec defines the desired state of Repository
type RepositorySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RepositoryParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RepositoryInitParameters `json:"initProvider,omitempty"`
}

// RepositoryStatus defines the observed state of Repository.
type RepositoryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RepositoryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Repository is the Schema for the Repositorys API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azuredevops}
type Repository struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.initialization) || (has(self.initProvider) && has(self.initProvider.initialization))",message="spec.forProvider.initialization is a required parameter"
	Spec   RepositorySpec   `json:"spec"`
	Status RepositoryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RepositoryList contains a list of Repositorys
type RepositoryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Repository `json:"items"`
}

// Repository type metadata.
var (
	Repository_Kind             = "Repository"
	Repository_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Repository_Kind}.String()
	Repository_KindAPIVersion   = Repository_Kind + "." + CRDGroupVersion.String()
	Repository_GroupVersionKind = CRDGroupVersion.WithKind(Repository_Kind)
)

func init() {
	SchemeBuilder.Register(&Repository{}, &RepositoryList{})
}
